NumberRotation

You will be given a positive integer N.
Your task is to find how many different integers can be generated by rotating the binary 
representation of N, arbitrary number of times.

We take the binary representation of N that doesn't have any leading zeroes.
The integers that are generated by rotation, can have leading zeroes.

A rotation (for example Right Rotation) is a transformation where each bit except for the 
right most one, is shifted one position to the right. The right most bit is moved to the left 
most position. 
 
Example:
N = 9
binaryN = 1001
By rotating 1001 to the right, the following integers are generated:
1100 = 12
0110 = 6
0011 = 3
1001 = 9
So, the answer in this case is 4 different integers.

Input parameters:
  N - integer, the positive integer that has to be rotated. 
  
Constraints:
  N will be between 1 and 2147483647 (2^31 - 1) inclusive.
  
Return value:
 int, the number of different integers that can be generated by rotating the bits of N. 

Class Name:
  NumberRotation

Method signature:
  public int count(int N)

Test Case 1:
  count(1) = 1

Test Case 2:
  count(2) = 2

Test Case 3:
  count(3) = 1

Test Case 4:
  count(4) = 3

Test Case 5:
  count(7) = 1

Test Case 6:
  count(9) = 4

Test Case 7:
  count(100) = 7

Test Case 8:
  count(10000) = 14

Test Case 9:
  count(1000000) = 20

Test Case 10:
  count(2147483647) = 1
